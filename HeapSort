
import java.util.Arrays;

import com.sun.org.apache.bcel.internal.generic.SWAP;

public class HeapSort extends Basic {


	public static void main(String[] args) {
		int[] arr = new int[]{1,3,5,56,456,44,5,2,4,2,8,54};
		HeapSort hs = new HeapSort();
		hs.Heap(arr);

	}
	
	//二叉树 -- 按数组下标进行排序（以0开始，子树为 2i+1, 2i+2）(以 1 开始：2i, 2i+1)
	public void Heap(int[] arr){
		
		int i;
		int len = arr.length;
		//构建一个大顶堆（一个二叉树，其中父节点大于所有子节点，子节点不用排左右）
		for(i=len/2;i>0;i--){
			HeapAdjust(arr,i,len);
		}
		
		
		for(i=len-1;i>0;i--){
			Swap_My(arr, 1, i);	//将堆顶记录和未经排序的最后一个元素进行交换，得到一个升序输出。
			HeapAdjust(arr,1,i-1);
		}
		
		System.out.println(Arrays.toString(arr));
	}

	public void HeapAdjust(int[] arr,int i, int len){
		
		int temp,j;
		temp=arr[i];
		for(j=2*i+1;j<len;j=2*j+1){
			if(arr[j]<arr[j+1])
				j++;
			if(arr[j]<temp){
				break;
			}
			arr[i] = arr[j];
			i = j;
		}
		arr[i] = temp;		
	}	
	
}
